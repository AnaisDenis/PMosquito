{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to PMosquito documentation!","text":""},{"location":"#pmosquito-assembly-of-interrupted-trajectory-data-by-videotracking","title":"PMosquito \u2013 Assembly of interrupted trajectory data by videotracking","text":"<p>In tracking experiments, brief signal losses can occur. When tracking multiple, closely spaced objects, these interruptions can cause short, fragmented trajectories that are difficult\u2014or even impossible\u2014to assign to the correct object.</p> <p>PMosquito solves this challenge by reliably reconnecting broken trajectories, delivering longer and more complete paths for tracked object. Originally developed for 3D video tracking of mosquito swarms within the ANOFEEL project \u2013 How ANOpheles Females sEEk maLes? (ANR-15-CE35-0001-01) \u2013 PMosquito can process any dataset that records the location of multiple objects in space and time, whether you are studying animal behavior, particle motion, swarm robotics, and more.</p> <p>A range of parameters can be customized to match the specific requirements of your study model.</p> <p> </p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>PMosquito \u2013 Assembly of interrupted trajectory data by videotracking</li> <li> <p>Installation of Pmosquito</p> <ul> <li>Open a terminal</li> <li>Check if Python is Installed</li> <li>Install Python </li> <li>Install pip (if not already installed)</li> <li>Virtual Environment</li> <li>Retrieve this file containing the codes and test</li> <li>Install Pmosquito</li> </ul> </li> <li> <p>How use Pmosquito?</p> <ul> <li>Exigence</li> <li>Project Structure</li> <li>Tests files</li> <li>Output Files</li> <li>Available Parameters</li> <li>Run Example</li> </ul> </li> </ul>"},{"location":"#contact","title":"Contact","text":"<p>For questions or suggestions, please contact: olivier.roux@ird.fr</p> <p>Project developed as part of a Master's thesis on mosquito behavior analysis.</p>"},{"location":"install/","title":"PMosquito \u2013 Assembly of interrupted trajectory data by videotracking","text":""},{"location":"install/#how-to-install","title":"How to install","text":""},{"location":"install/#installation-of-pmosquito","title":"Installation of Pmosquito","text":""},{"location":"install/#open-a-terminal","title":"Open a terminal","text":"<p>A terminal (or command prompt) is a tool that allows you to interact with your computer by typing text commands. Unlike a graphical interface (where you click buttons), the terminal allows you to execute specific instructions, such as launching a Python script, installing libraries, or navigating through your project folders.</p> <p>Windows: Press Windows + R, type cmd, and then press Enter.</p> <p>macOS: Open the Terminal application via Spotlight (Cmd + Space, then type \"Terminal\").</p> <p>Linux: Use the shortcut Ctrl + Alt + T or search for \"Terminal\" in your applications menu.</p> <p>To install Pmosquito, you need Python </p>"},{"location":"install/#check-if-python-is-installed","title":"Check if Python is Installed","text":"<p>Type the following command:</p> <pre><code>python --version\n</code></pre> <p>or </p> <pre><code>python3 --version\n</code></pre> <p>If you see something like Python 3.x.x, Python is already installed. Otherwise, proceed to the next step.</p>"},{"location":"install/#install-python","title":"Install Python","text":"<p>For Windows</p> <p>Go to https://www.python.org/downloads/windows/</p> <p>Click Download Python 3.x.x</p> <p>IMPORTANT: On the first installation screen, check the box \"Add Python to PATH\"</p> <p>Click Install Now</p> <p>After installation, reopen your terminal and check:</p> <pre><code>python --version\n</code></pre> <p>For macOS</p> <p>If needed, install Homebrew</p> <p>Use the following command:</p> <pre><code>brew install python\n</code></pre> <p>For Linux (Debian, Ubuntu, etc.)</p> <p>Use the following commands:</p> <pre><code>sudo apt update\nsudo apt install python3 python3-venv python3-pip\n</code></pre>"},{"location":"install/#install-pip-if-not-already-installed","title":"Install pip (if not already installed)","text":"<p>Most modern Python installations include pip. To check:</p> <pre><code>pip --version\n</code></pre> <p>or</p> <pre><code>pip3 --version\n</code></pre> <p>If it's missing:</p> <p>On Windows, reinstall Python and ensure \"Install pip\" is checked</p> <p>On Linux, use:</p> <pre><code>sudo apt install python3-pip\n</code></pre>"},{"location":"install/#virtual-environment","title":"Virtual Environment","text":"<p>It is recommended to use a virtual environment:</p> <ul> <li>Each virtual environment contains its own version of Python and its own packages, independent of other projects or the system installation. This prevents a package update for one project from breaking another.</li> <li>You can install exactly the versions of libraries needed for one project without affecting others. Perfect for replicating an environment on another machine.</li> </ul> <p>In your terminal you need to move to the Pmosquito-main directory You must write in your terminal: </p> <pre><code>cd path_name\n</code></pre> <p>Note: To find your path: Open File Explorer. Go to your project folder. Click in the address bar at the top: the path will appear.</p> <p>Then, type :</p> <pre><code>python -m venv env\n</code></pre> <p>Here, env is the name of the virtual environment. You can choose a different name if you wish. This creates an env/ folder containing an isolated Python installation.</p> <p>Then ypu need to activate your virtual environment. Type always in your terminal :</p> <p>For Windows</p> <pre><code>.\\env\\Scripts\\activate\n</code></pre> <p>For Linux/macOS</p> <pre><code>source env/bin/activate\n</code></pre> <p>Normally you should see your virtual environment name displayed in parentheses at the beginning of the new command line</p>"},{"location":"install/#retrieve-this-file-containing-the-codes-and-test","title":"Retrieve this file containing the codes and test","text":"<p>Download PMosquito as a ZIP file</p> <p>You can extract this folder to the directory of your choice: you will find the .zip file in your downloads. Move it by right-clicking, cutting, and pasting it into the directory of your choice. Then right-click and extract here.</p>"},{"location":"install/#install-pmosquito","title":"Install Pmosquito","text":"<p>Once your virtual environment is activated and you are in the project directory (the folder that contains <code>pyproject.toml</code>), install Pmosquito and its dependencies with:</p> <pre><code>pip install .\n</code></pre> <p>This command will install: - the <code>Pmosquito</code> tool, - all required dependencies: <code>pandas</code>, <code>numpy</code>, <code>scikit-learn</code>, <code>matplotlib</code>, <code>seaborn</code>.</p>"},{"location":"usage/","title":"How use Pmosquito?","text":""},{"location":"usage/#exigence","title":"Exigence","text":"<p>To use this code, you need a CSV file in the following format:</p> <ul> <li> <p>object: an integer identifier representing an object tracked over time.</p> </li> <li> <p>time: a decimal number representing the elapsed time in seconds.</p> </li> <li> <p>XSplined: the object's position along the X-axis (horizontal coordinate), expressed as a decimal number.</p> </li> <li> <p>YSplined: the object's position along the Y-axis (vertical coordinate), expressed as a decimal number.</p> </li> <li> <p>ZSplined: the object's position along the Z-axis (depth or height), expressed as a decimal number.</p> </li> <li> <p>VXSplined: the object's velocity along the X-axis, expressed as a decimal number.</p> </li> <li> <p>VYSplined: the object's velocity along the Y-axis, expressed as a decimal number.</p> </li> <li> <p>VZSplined: the object's velocity along the Z-axis, expressed as a decimal number.</p> </li> </ul> <p>Each row of the file therefore corresponds to the state of an object at a given moment, including its spatial position and velocity in all three dimensions.</p> <p>Example (excerpt):</p> object time XSplined YSplined ZSplined VXSplined VYSplined VZSplined 1 3.151 0.192 -0.152 -0.111 0.465 -0.050 0.403 1 3.171 0.201 -0153 -0.103 0.470 -0.044 0.396"},{"location":"usage/#project-structure","title":"Project Structure","text":"<p>The folder is organized as follows: <pre><code> PMosquito/\n\u251c\u2500\u2500 main.py                         # Main script\n\u251c\u2500\u2500 utils.py                        # Utility functions (clustering, calculations, visualizations)\n\u251c\u2500\u2500 requirements.txt                # Python dependencies\n\u2514\u2500\u2500 Tests\n    \u251c\u2500\u2500 test_set_fictive.csv    \n    \u251c\u2500\u2500 test_set_semi_fictionnal.csv\n    \u251c\u2500\u2500 test_set_representing_a_tracking_bug.csv\n    \u251c\u2500\u2500 test_set_extract_real_data.csv\n    \u251c\u2500\u2500 result_test_set_fictive\n        \u251c\u2500\u2500 test_set_fictive_reconstitue.csv \n        \u2514\u2500\u2500 visualisation.png # swarm swarm visualization\n    \u251c\u2500\u2500 result_test_set_semi_fictionnal\n        \u251c\u2500\u2500 test_set_semi_fictionnal_reconstitue.csv \n        \u2514\u2500\u2500 visualisation.png # swarm swarm visualization \n    \u2514\u2500\u2500 result_test_set_extract_real_data\n        \u251c\u2500\u2500 debug\n            \u251c\u2500\u2500 connexions_spatiotemporelles.csv \n            \u251c\u2500\u2500 connexions_valides.csv \n            \u251c\u2500\u2500 matrice_spatiotemporelle.csv \n            \u2514\u2500\u2500 PostProc_Filtered_2022_06_23_18_48_35_Splined_avec_features \n        \u251c\u2500\u2500 graphiques \n            \u251c\u2500\u2500 histogram_distance.png \n            \u251c\u2500\u2500 histogram_time.png \n            \u251c\u2500\u2500 mirrored_duration_histogram.png\n            \u2514\u2500\u2500 reconstitition_graphique.png \n        \u2514\u2500\u2500 PostProc_Filtered_2022_06_23_18_48_35_Splined_reconstitue \n</code></pre></p>"},{"location":"usage/#tests-files","title":"Tests files","text":"<p>The test folder includes several different data files. - test_set_fictive.csv : This file contains 50 initial trajectories divided into 4 fragments. The times associated with the trajectories are between t= 0s and t=30s. Each trajectory is derived from functions allowing the creation of trajectories that can approximate those of a swarm of mosquitoes.</p> <ul> <li> <p>test_set_semi_fictionnal.csv : This file contains 66 initial trajectories divided into 4 fragments. The times associated with the trajectories are between t= 0s and t=30s. Each trajectory is taken from real data but has been repositioned in time and selected because it lasted at least 30sec.</p> </li> <li> <p>test_set_representing_a_tracking_bug.csv : These are the same trajectories as the previous file, but the fragments are segmented 0.2 seconds to the 20th second for all trajectories. This file can be compared to a technical tracking bug.</p> </li> <li> <p>test_set_extract_real_data.csv : This dataset is an extract from a csv file that represents our real data from mosquito video tracking.</p> </li> </ul>"},{"location":"usage/#output-files","title":"Output Files","text":"<p>The program generates:</p> <pre><code>your_filename_reconstitute.csv # Data with updated trajectory identifiers (when a trajectory is considered a continuation of another)\n</code></pre> <p>With option debug :</p> <pre><code>connexions_spatiotemporelles.csv \nconnexions_valides.csv # fragments of trajectories that come together\nmatrice_spatiotemporelle.csv # result\nyour_filename_avec_features # add features\n</code></pre> <p>With option graphiques :    </p> <pre><code>histogram_distance.png # distance during the gap\nhistogram_time.png # gap time \nmirrored_duration_histogram.png # comparison of durations after reconstitution\nreconstitition_graphique.png #  visual of the durations of the trajectories and their reconstructions\n</code></pre>"},{"location":"usage/#available-parameters","title":"Available Parameters","text":"<p>You can customize trajectory reconstruction using the following parameters:</p> Argument Description Valeurs par defaut <code>csv_path</code> (positional) Path to the CSV file Required <code>--seuil_temps</code> Temporal threshold to connect two objects Optional (0.5) <code>--seuil_distance</code> Spatial proximity threshold Optional (0.3) <code>--n_clusters</code> Number of clusters to use Optional (10) <code>--debug</code> Displays additional info and intermediate results Optional (False) <code>--poids-temps</code> Weight of the temporal component Optional (1.0) <code>--poids-distance</code> Weight of the spatial component Optional (1.0) <code>--poids-ressemblance</code> Intra-cluster similarity weight Optional (1.0) <code>--bonus-cible-source</code> Bonus if the target is also a source Optional (0.3) <code>--time-min-reconstitute</code> Minimum duration to keep a trajectory Optional (0.0) <code>--graphiques</code> Save some statistical graphics about the reconstitution Optional (0.0)"},{"location":"usage/#run-example","title":"Run Example","text":"<p>Here's an example command to run the program:</p> <pre><code>pmosquito path_to_your_file.csv\n</code></pre> <p>Make sure you're always in the Pmosquito file: your terminal command line should always start with C:\\Your_path_to\\PMosquito\\ &gt; If this isn't the case, don't forget to </p> <pre><code>cd path_name\n</code></pre> <p>To add options, simply enter: \"--   name of the option   desired parameter\"</p> <pre><code>C:\\Your_path_to\\PMosquito\\ &gt; python main.py path_to_your_file.csv --seuil_temps 0.4 --seuil_distance 0.2 --debug --time-min-reconstitute 10.0\n</code></pre> <p>In this example:</p> <ul> <li> <p>Connected mosquitoes must be no more than 0.2m apart and within 0.4s of each other.</p> </li> <li> <p>The debug flag enables detailed logging and intermediate results.</p> </li> <li> <p>Trajectories shorter than 10 seconds are excluded from the final CSV output.</p> </li> </ul>"}]}